{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yuna.hiraide/Desktop/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yuna.hiraide/Desktop/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yuna.hiraide/Desktop/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _class2, _temp;\n\nimport { observable } from \"mobx\"; // This globally accessible store might come in handy, although you may decide that you don't need it.\n\nexport let RootStore = (_class = (_temp = _class2 = class RootStore {\n  constructor() {// initialization code\n\n    _initializerDefineProperty(this, \"test\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"SilenceMultipleCalls\", _descriptor2, this);\n  }\n\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  //getters\n  getTest() {\n    return this.test;\n  } // public getMainCollection():NodeCollectionStore{\n  //     return this.mainCollection;\n  // }\n  // public getTopCollection():NodeCollectionStore{\n  //     return this.topCollection;\n  // }\n  //setters\n\n\n  increaseTopZindex() {// this.topZindex++;\n  }\n\n}, _class2._instance = void 0, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"test\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"testing\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"SilenceMultipleCalls\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);","map":{"version":3,"sources":["/Users/yuna.hiraide/Desktop/my-app/src/Rootstore.ts"],"names":["observable","RootStore","constructor","Instance","_instance","getTest","test","increaseTopZindex"],"mappings":";;;;;;AAAA,SAAiBA,UAAjB,QAAmC,MAAnC,C,CAEA;;AACA,WAAaC,SAAb,gCAAO,MAAMA,SAAN,CAAgB;AAEXC,EAAAA,WAAR,GAAsB,CAClB;;AADkB;;AAAA;AAErB;;AAID,aAAkBC,QAAlB,GAAuC;AACnC,WAAO,KAAKC,SAAL,KAAmB,KAAKA,SAAL,GAAiB,IAAI,IAAJ,EAApC,CAAP;AACH;;AA2BD;AACOC,EAAAA,OAAP,GAAuB;AACnB,WAAO,KAAKC,IAAZ;AACH,GAxCkB,CAyCnB;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AACOC,EAAAA,iBAAP,GAA+B,CAC3B;AACH;;AApDkB,CAAvB,UAMmBH,SANnB,uFAYKJ,UAZL;AAAA;AAAA;AAAA;AAAA;AAAA,WAa2B,SAb3B;AAAA;AAAA,wFAkCKA,UAlCL;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { action, observable } from \"mobx\";\n\n// This globally accessible store might come in handy, although you may decide that you don't need it.\nexport class RootStore {\n\n    private constructor() {\n        // initialization code\n    }\n\n    private static _instance: RootStore;\n\n    public static get Instance():RootStore {\n        return this._instance || (this._instance = new this());\n    }\n\n    @observable\n    private test: string = \"testing\";\n\n    // //used for when switching of top collection occurs\n    // @observable\n    // private mainCollection: NodeCollectionStore;\n\n    // @observable\n    // private topCollection: NodeCollectionStore;\n\n    //a array of all existing nodecollection stores\n    //useful for when a node wants to be copied in multiple collection and for tree view\n    // @observable\n    // public Collection: NodeCollectionStore[] = new Array<NodeCollectionStore>();\n\n    // //add the collection to the array\n    // @action\n    // public AddCollections(store: NodeCollectionStore): void {\n    //     this.Collection.push(store);\n    // }\n\n    //Please see CollectionNodeView class \n    @observable\n    public SilenceMultipleCalls: number;\n\n    //getters\n    public getTest():string{\n        return this.test;\n    }\n    // public getMainCollection():NodeCollectionStore{\n    //     return this.mainCollection;\n    // }\n    \n    // public getTopCollection():NodeCollectionStore{\n    //     return this.topCollection;\n    // }\n\n    //setters\n    public increaseTopZindex():void{\n        // this.topZindex++;\n    }\n    \n \n}"]},"metadata":{},"sourceType":"module"}